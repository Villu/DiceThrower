// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package net.sepman.dice.web;

import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import net.sepman.dice.domain.DiceThrow;
import net.sepman.dice.service.DiceService;
import net.sepman.dice.service.ThrowService;
import net.sepman.dice.web.ThrowController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ThrowController_Roo_Controller {
    
    @Autowired
    ThrowService ThrowController.throwService;
    
    @Autowired
    DiceService ThrowController.diceService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String ThrowController.create(@Valid DiceThrow diceThrow, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, diceThrow);
            return "dicethrows/create";
        }
        uiModel.asMap().clear();
        throwService.saveDiceThrow(diceThrow);
        return "redirect:/dicethrows/" + encodeUrlPathSegment(diceThrow.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String ThrowController.createForm(Model uiModel) {
        populateEditForm(uiModel, new DiceThrow());
        return "dicethrows/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String ThrowController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("dicethrow", throwService.findDiceThrow(id));
        uiModel.addAttribute("itemId", id);
        return "dicethrows/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String ThrowController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("dicethrows", throwService.findDiceThrowEntries(firstResult, sizeNo));
            float nrOfPages = (float) throwService.countAllDiceThrows() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("dicethrows", throwService.findAllDiceThrows());
        }
        addDateTimeFormatPatterns(uiModel);
        return "dicethrows/list";
    }
    
    void ThrowController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("diceThrow_throwtime_date_format", "dd-MM-yy hh:mm:ss");
    }
    
    void ThrowController.populateEditForm(Model uiModel, DiceThrow diceThrow) {
        uiModel.addAttribute("diceThrow", diceThrow);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("dies", diceService.findAllDies());
    }
    
    String ThrowController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
